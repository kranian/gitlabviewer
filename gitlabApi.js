// Generated by CoffeeScript 1.12.5
(function() {
  var $, _, bmtPrjId, customerTypeLabelColor, deptTypeLabelColor, devPrjId, ipcRenderer, maintenancePrjId, priorityTypeLabelColor, taskTypeLabelColor, token,
    slice = [].slice;

  $ = require('jquery');

  _ = require('lodash');

  ipcRenderer = require('electron').ipcRenderer;

  token = ipcRenderer.sendSync('getToken');

  maintenancePrjId = 19;

  devPrjId = 2;

  bmtPrjId = 15;

  customerTypeLabelColor = '#44ad8e';

  taskTypeLabelColor = '#428bca';

  deptTypeLabelColor = '#d9534f';

  priorityTypeLabelColor = '#ff0000';

  module.exports = {};


  /*
    issue format
  
    {
          "id": 350,
          "iid": 3,
          "project_id": 19,
          "title": "Tibero SMS 연동",
          "description": "",
          "state": "opened",
          "created_at": "2016-10-10T15:39:35.203+09:00",
          "updated_at": "2016-10-10T15:45:43.812+09:00",
          "labels": [
              "교통안전공단",
              "기능개선"
          ],
          "milestone": null,
          "assignee": null,
          "author": {
              "name": "callin",
              "username": "callin",
              "id": 4,
              "state": "active",
              "avatar_url": "http://www.gravatar.com/avatar/beb88205c2b0bbf7f2bcc8a4f503eceb?s=80\u0026d=identicon",
              "web_url": "http://elevisor.iptime.org:9937/u/callin"
          }
      }
   */

  module.exports.setToken = function(tkn) {
    return token = tkn;
  };

  module.exports.getIssueList = function(prjId) {
    var allIssueList, df, getIsList, page_index, per_page;
    if (prjId == null) {
      prjId = 2;
    }
    df = $.Deferred();
    per_page = 100;
    page_index = 1;
    allIssueList = [];
    getIsList = function() {
      return $.ajax({
        url: 'http://elevisor.iptime.org:9937/api/v3/projects/' + prjId + '/issues?state=opened',
        headers: {
          'PRIVATE-TOKEN': token
        },
        data: {
          "per_page": per_page,
          "page": page_index
        }
      }).then(function(response) {
        var i, len, v;
        for (i = 0, len = response.length; i < len; i++) {
          v = response[i];
          allIssueList.push(v);
        }
        if (per_page === response.length) {
          page_index++;
          return getIsList();
        } else {
          return df.resolve(allIssueList);
        }
      });
    };
    getIsList();
    return df.promise();
  };

  module.exports.getIssue = function(prjId, issueId) {
    var df, getIssue;
    if (prjId == null) {
      prjId = 2;
    }
    if (issueId == null) {
      issueId = 1;
    }
    df = $.Deferred();
    getIssue = function() {
      return $.ajax({
        url: "http://elevisor.iptime.org:9937/api/v3/projects/" + prjId + "/issues/" + issueId,
        headers: {
          'PRIVATE-TOKEN': token
        }
      }).then(function(response) {
        return df.resolve(response);
      });
    };
    getIssue();
    return df.promise();
  };


  /*0 {
      "id": 6,
      "description": null,
      "default_branch": "master",
      "public": false,
      "visibility_level": 0,
      "ssh_url_to_repo": "git@example.com:brightbox/puppet.git",
      "http_url_to_repo": "http://example.com/brightbox/puppet.git",
      "web_url": "http://example.com/brightbox/puppet",
      "tag_list": [
        "example",
        "puppet"
      ],
      "owner": {
        "id": 4,
        "name": "Brightbox",
        "created_at": "2013-09-30T13:46:02Z"
      },
      "name": "Puppet",
      "name_with_namespace": "Brightbox / Puppet",
      "path": "puppet",
      "path_with_namespace": "brightbox/puppet",
      "issues_enabled": true,
      "open_issues_count": 1,
      "merge_requests_enabled": true,
      "builds_enabled": true,
      "wiki_enabled": true,
      "snippets_enabled": false,
      "container_registry_enabled": false,
      "created_at": "2013-09-30T13:46:02Z",
      "last_activity_at": "2013-09-30T13:46:02Z",
      "creator_id": 3,
      "namespace": {
        "created_at": "2013-09-30T13:46:02Z",
        "description": "",
        "id": 4,
        "name": "Brightbox",
        "owner_id": 1,
        "path": "brightbox",
        "updated_at": "2013-09-30T13:46:02Z"
      },
      "permissions": {
        "project_access": {
          "access_level": 10,
          "notification_level": 3
        },
        "group_access": {
          "access_level": 50,
          "notification_level": 3
        }
      },
      "archived": false,
      "avatar_url": null,
      "shared_runners_enabled": true,
      "forks_count": 0,
      "star_count": 0,
      "runners_token": "b8547b1dc37721d05889db52fa2f02",
      "public_builds": true,
      "shared_with_groups": [],
      "only_allow_merge_if_build_succeeds": false,
      "request_access_enabled": false
    }
   */

  module.exports.getProjectList = function() {
    var allIssueList, df, getIsList, page_index, per_page;
    df = $.Deferred();
    per_page = 100;
    page_index = 1;
    allIssueList = [];
    getIsList = function() {
      return $.ajax({
        url: 'http://elevisor.iptime.org:9937/api/v3/projects/all',
        headers: {
          'PRIVATE-TOKEN': token
        },
        data: {
          "per_page": per_page,
          "page": page_index
        }
      }).then(function(response) {
        var i, len, v;
        console.log('response', response);
        for (i = 0, len = response.length; i < len; i++) {
          v = response[i];
          allIssueList.push(v);
        }
        if (per_page === response.length) {
          page_index++;
          return getIsList();
        } else {
          return df.resolve(allIssueList);
        }
      });
    };
    getIsList();
    return df.promise();
  };

  module.exports.getUserList = function() {
    var allIssueList, df, getIsList, page_index, per_page;
    df = $.Deferred();
    per_page = 100;
    page_index = 1;
    allIssueList = [];
    getIsList = function() {
      return $.ajax({
        url: 'http://elevisor.iptime.org:9937/api/v3/users',
        headers: {
          'PRIVATE-TOKEN': token
        },
        data: {
          "per_page": per_page,
          "page": page_index
        }
      }).then(function(response) {
        var i, len, v;
        for (i = 0, len = response.length; i < len; i++) {
          v = response[i];
          allIssueList.push(v);
        }
        if (per_page === response.length) {
          page_index++;
          return getIsList();
        } else {
          return df.resolve(allIssueList);
        }
      });
    };
    getIsList();
    return df.promise();
  };


  /*
    {color:'#ff0000', name:'긴급'}
   */

  module.exports.getLabelList = function(projId) {
    var allLabelList, df, getLbl, page_index, per_page;
    df = $.Deferred();
    per_page = 100;
    page_index = 1;
    allLabelList = [];
    getLbl = function() {
      return $.ajax({
        url: 'http://elevisor.iptime.org:9937/api/v3/projects/' + projId + '/labels',
        headers: {
          'PRIVATE-TOKEN': token
        },
        data: {
          "per_page": per_page,
          "page": page_index
        }
      }).then(function(response) {
        var i, len, v;
        console.log('response', response);
        for (i = 0, len = response.length; i < len; i++) {
          v = response[i];
          allLabelList.push(v);
        }
        if (per_page === response.body.length) {
          page_index++;
          return getLbl();
        } else {
          return df.resolve(allLabelList);
        }
      });
    };
    getLbl();
    return df.promise();
  };

  module.exports.getLabelsByPrjNColor = function(projId, color) {
    var df;
    df = $.Deferred();
    module.exports.getLabelList(projId).then(function(allLabelList) {
      return df.resolve(_(allLabelList).filter(function(v) {
        return v.color === color;
      }).map('name').value());
    });
    return df.promise();
  };

  module.exports.getAllIssueList = function() {
    var df;
    df = $.Deferred();
    module.exports.getProjectList().then(function(rslt) {
      var issP;
      issP = _.map(rslt, function(v) {
        return module.exports.getIssueList(v.id);
      });
      return $.when.apply($, issP).then(function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return df.resolve(_.flatten(args));
      });
    });
    return df.promise();
  };

}).call(this);

//# sourceMappingURL=gitlabApi.js.map
