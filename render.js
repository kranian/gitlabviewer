// Generated by CoffeeScript 1.12.5
(function() {
  var $, $body, _, allIssue, allLabel, allMilestone, allProject, allUser, api, budgetRegEx, d3, dateRegEx, doFilter, filter, filterBtnTmpl, filterItemTmpl, filterPrjItemTmpl, filterReset, ipcRenderer, issueTmpl, shell, showdown;

  $ = require('jquery');

  _ = require('lodash');

  d3 = require('d3');

  showdown = require('showdown');

  api = require('./gitlabApi');

  shell = require('electron').shell;

  ipcRenderer = require('electron').ipcRenderer;

  $body = $('body');

  issueTmpl = _.template("\n<td><%=iss.prjName%></td>\n<td><%=iss.milestone.title %></td>\n<td><%=iss.project_id == 19 ? iss.client : iss.subjectLabel %></td>\n<td><%=iss.assignee.realname%></td>\n<td class='<%=iss.el_state%>' ><span class='<%=iss.el_state%>' data-url='http://elevisor.iptime.org:9937/elevisor/<%=iss.realprjName%>/issues/<%=iss.iid%>' data-projectid='<%=iss.project_id%>' data-issueid='<%=iss.id%>'><%=iss.title%></span></td>\n<td><%=iss.important%></td>\n<td><%=iss.urgent%></td>\n<td align='right'><%=iss.budget%></td>\n<td><%=iss.created_at.substr(0,10)%></td>\n<td><%=iss.updated_at.substr(0,10)%></td>\n<td><%=iss.beginDt%></td>\n<td><%=iss.endDt%></td>\n<td>#<%=iss.iid%></td>\n<td><%=iss.client%></td>\n<td></td>\n<td><button></button></td>");

  filterItemTmpl = _.template("<span class=\"nav-group-item itm\" data-id='${id}'>${name}</span>");

  filterPrjItemTmpl = _.template("<span class=\"nav-group-item itm\" data-id='${id}'>${name}</span>");

  filterBtnTmpl = _.template("<button class=\"btn btn-default label\" data-id='${id}'>${name}</button>");

  allIssue = [];

  filter = {
    project_id: '*',
    milestone: '*',
    label: '*',
    user: '*',
    progress: '*',
    issueTitle: ''
  };

  allMilestone = [];

  allLabel = [];

  allProject = [];

  allUser = [];

  dateRegEx = /!DT\[(.*)\]/;

  budgetRegEx = /!BG\[(.*)\]/;

  $.when(api.getProjectList(), api.getAllIssueList()).done(function(prjects, rslt) {
    var allProjectMapper, rows;
    allProjectMapper = {};
    _.each(prjects, function(val) {
      var prjId;
      prjId = val.id;
      allProjectMapper[prjId] = {};
      allProjectMapper[prjId].id = val.id;
      return allProjectMapper[prjId].name = val.name;
    });
    console.log('allProjectMapper', allProjectMapper);
    allIssue = _.map(rslt, function(iss) {
      var budget, r;
      iss.subjectLabel = _(iss.labels).filter(function(l) {
        return l.indexOf('[') < 0;
      }).filter(function(l) {
        return l.indexOf('진행') < 0;
      }).filter(function(l) {
        return l.indexOf('긴급') < 0;
      }).filter(function(l) {
        return l.indexOf('종료') < 0;
      }).filter(function(l) {
        return l !== '상';
      }).filter(function(l) {
        return l !== '중';
      }).filter(function(l) {
        return l !== '하';
      }).filter(function(l) {
        return l.indexOf('확인') < 0;
      }).filter(function(l) {
        return l.indexOf('TODO') < 0;
      }).filter(function(l) {
        return l.indexOf('report') < 0;
      }).filter(function(l) {
        return l.indexOf('_cl') < 0;
      }).value();
      iss.client = _(iss.labels).filter(function(l) {
        return l.indexOf('_cl') > 0;
      }).map(function(l) {
        return l.split('_')[0];
      }).value().join(',');
      iss.urgent = _(iss.labels).filter(function(l) {
        return l.indexOf('긴급') >= 0;
      }).map(function() {
        return 'O';
      }).value().join('');
      iss.important = _(iss.labels).filter(function(l) {
        return l.indexOf('중요') >= 0;
      }).map(function() {
        return 'O';
      }).value().join('');
      iss.el_state = _(iss.labels).filter(function(l) {
        return l.indexOf('작업종료') >= 0 || l.indexOf('진행중') >= 0;
      }).map(function(l) {
        switch (l) {
          case '작업종료':
            return 'done';
          case '진행중':
            return 'inprogress';
          default:
            return '';
        }
      }).value().join('');
      if (iss.milestone == null) {
        iss.milestone = {
          title: ''
        };
      }
      if (iss.assignee == null) {
        iss.assignee = {
          name: ''
        };
      }
      iss.assignee.realname = iss.assignee.name;
      iss.prjName = allProjectMapper[iss.project_id].name;
      iss.realprjName = allProjectMapper[iss.project_id].name;
      iss.beginDt = '';
      iss.endDt = '';
      r = dateRegEx.exec(iss.description);
      if (r !== null) {
        iss.beginDt = r[1].split('~')[0];
        iss.endDt = r[1].split('~')[1];
      }
      budget = budgetRegEx.exec(iss.description);
      iss.budget = '';
      if (budget !== null) {
        iss.budget = budget[1];
      }
      return iss;
    });
    allMilestone = _(allIssue).map('milestone').filter(function(v) {
      return v !== null;
    }).map('title').uniq().value();
    allLabel = _(allIssue).map('labels').flatten().uniq().sort().value();
    allProject = prjects;
    allUser = _(allIssue).map('assignee').filter(function(v) {
      return v !== null;
    }).map('name').uniq().value();
    allIssue.sort(function(a, b) {
      var order;
      order = b.project_id - a.project_id;
      if (order !== 0) {
        return order;
      }
      if (a.milestone.title !== b.milestone.title) {
        if (a.milestone.title < b.milestone.title) {
          return 1;
        } else {
          return -1;
        }
      }
      if (a.subjectLabel.join(',') !== b.subjectLabel.join(',')) {
        if (a.subjectLabel.join(',') < b.subjectLabel.join(',')) {
          return 1;
        } else {
          return -1;
        }
      }
      if (a.assignee.name < b.assignee.name) {
        return 1;
      } else {
        return -1;
      }
    });
    rows = d3.select('.main tbody').selectAll('tr').data(allIssue, function(d) {
      return d.id;
    });
    rows.enter().append('tr').html(function(d) {
      return issueTmpl({
        iss: d
      });
    });
    _.each(allProject, function(prj) {
      return $('nav.project').append(filterPrjItemTmpl(prj));
    });
    _.each(allLabel, function(lbl) {
      return $('#labelBtnGrp').append(filterBtnTmpl({
        id: lbl,
        name: lbl
      }));
    });
    _.each(allMilestone, function(m) {
      return $('nav.milestone').append(filterItemTmpl({
        id: m,
        name: m
      }));
    });
    return _.each(allUser, function(u) {
      return $('nav.user').append(filterItemTmpl({
        id: u,
        name: u
      }));
    });
  });

  $('nav').on('mousedown', '.nav-group-item', function(evt) {
    var $nav, $t, category, idVal;
    $t = $(evt.target);
    $nav = $t.parent();
    category = $nav.data('ctype');
    $nav.find('.nav-group-item').removeClass('active');
    $(evt.target).addClass('active');
    idVal = $t.data('id');
    switch (category) {
      case 'progress':
        filter.progress = idVal.split(',');
        break;
      case 'project':
        filter.project_id = '' + idVal;
        filter.milestone = '*';
        filter.label = '*';
        filterReset('project');
        break;
      case 'milestone':
        filter.milestone = idVal;
        filter.label = '*';
        filterReset('milestone');
        break;
      case 'user':
        filter.user = idVal;
    }
    return doFilter();
  });

  $('#labelBtnGrp').on('click', 'button.label', function(evt) {
    var selectedLabels;
    $(evt.target).toggleClass('active');
    selectedLabels = $('#labelBtnGrp button.active').map(function() {
      return $(this).data('id');
    }).get();
    if (selectedLabels.length === 0) {
      filter.label = '*';
    } else {
      filter.label = selectedLabels;
    }
    return doFilter();
  });

  $('.tab-item').click(function(evt) {
    var tabid;
    $('.tab-item').removeClass('active');
    $(this).addClass('active');
    tabid = $(this).data('tabid');
    $('.sidebar .pane').hide();
    return $('.sidebar .pane.' + tabid).show();
  });

  $('#clearBtn').click(function() {
    $('#labelBtnGrp button').removeClass('active');
    filter.label = '*';
    return doFilter();
  });

  $('#refreshBtn').click(function(evt) {
    if (evt.shiftKey) {
      return ipcRenderer.sendSync('resetToken');
    } else {
      return window.location.reload();
    }
  });

  $('tbody').on('click', 'td span', function(evt) {
    var cv, issueId, projectId;
    projectId = $(this).data('projectid');
    issueId = $(this).data('issueid');
    console.log('projectId =>', projectId, issueId);
    cv = new showdown.Converter();
    return api.getIssue(projectId, issueId).then(function(issue) {
      document.querySelector('.contents').innerHTML = '';
      $('.contents').append(cv.makeHtml(issue.description));
      return document.querySelector('#hello_issue').showModal();
    });
  });

  $('#cancel').on('click', function(evt) {
    return document.querySelector('#hello_issue').close(false);
  });

  $('#save').on('click', function(evt) {
    return document.querySelector('#hello_issue').close(false);
  });

  $('input:text').keyup(function(evt) {
    filter.issueTitle = $(evt.target).val();
    return doFilter();
  });

  $('div.pane.scroll').scroll(function() {
    var i, idx, ref, results, tds, ths, wst;
    wst = $('div.pane.scroll').scrollTop();
    if (wst > 75) {
      $('table.main thead').addClass('fixHeader');
      ths = $('table.main thead tr th');
      tds = $('table.main tbody tr:eq(0) td');
      results = [];
      for (idx = i = 0, ref = ths.length - 1; 0 <= ref ? i <= ref : i >= ref; idx = 0 <= ref ? ++i : --i) {
        results.push($(ths[idx]).width($(tds[idx]).width()));
      }
      return results;
    } else {
      return $('table.main thead').removeClass('fixHeader');
    }
  });

  filterReset = function(level) {
    var filteredIssue;
    $('#labelBtnGrp button.label').remove();
    switch (level) {
      case 'project':
        filteredIssue = _(allIssue).filter(function(v) {
          if (filter.project_id === '*') {
            return true;
          } else {
            return ('' + v.project_id) === filter.project_id;
          }
        });
        allMilestone = filteredIssue.map('milestone').filter(function(v) {
          return v !== null;
        }).map('title').uniq().value();
        allLabel = filteredIssue.map('labels').flatten().uniq().sort().value();
        $('nav.milestone span.itm').remove();
        _.each(allMilestone, function(m) {
          return $('nav.milestone').append(filterItemTmpl({
            id: m,
            name: m
          }));
        });
        break;
      case 'milestone':
        filteredIssue = _(allIssue).filter(function(v) {
          if (filter.project_id === '*') {
            return true;
          } else {
            return ('' + v.project_id) === filter.project_id;
          }
        }).filter(function(v) {
          var ref;
          if (filter.milestone === '*') {
            return true;
          } else {
            return ((ref = v.milestone) != null ? ref.title : void 0) === filter.milestone;
          }
        });
        allLabel = filteredIssue.map('labels').flatten().uniq().sort().value();
    }
    return _.each(allLabel, function(lbl) {
      return $('#labelBtnGrp').append(filterBtnTmpl({
        id: lbl,
        name: lbl
      }));
    });
  };

  doFilter = function() {
    var filteredIssue, rows;
    console.log('filter', filter);
    filteredIssue = _(allIssue).filter(function(v) {
      if (filter.project_id === '*') {
        return true;
      } else {
        return ('' + v.project_id) === filter.project_id;
      }
    }).filter(function(v) {
      var ref;
      if (filter.milestone === '*') {
        return true;
      } else {
        return ((ref = v.milestone) != null ? ref.title : void 0) === filter.milestone;
      }
    }).filter(function(v) {
      if (filter.issueTitle === '') {
        return true;
      } else {
        return v.title.indexOf(filter.issueTitle) >= 0;
      }
    }).filter(function(v) {
      if (filter.label === '*') {
        return true;
      } else {
        return _.intersection(v.labels, filter.label).length > 0;
      }
    }).filter(function(v) {
      var ref;
      if (filter.user === '*') {
        return true;
      } else {
        return ((ref = v.assignee) != null ? ref.name : void 0) === filter.user;
      }
    }).filter(function(v) {
      if (filter.progress[0] === '*') {
        return true;
      } else {
        return _.intersection(v.labels, filter.progress).length > 0;
      }
    }).value();
    console.log("filter.progress.length", filter.progress.length);
    if (filter.progress.length === 2) {
      filteredIssue.sort(function(a, b) {
        if (b.el_state > a.el_state) {
          return 1;
        } else {
          return -1;
        }
      });
    }
    rows = d3.select('.main tbody').selectAll('tr').data(filteredIssue, function(d) {
      return d.id;
    });
    rows.enter().append('tr').html(function(d) {
      return issueTmpl({
        iss: d
      });
    });
    return rows.exit().remove();
  };

}).call(this);

//# sourceMappingURL=render.js.map
